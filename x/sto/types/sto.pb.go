// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eeta/sto/sto.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sto struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BillboardId uint64 `protobuf:"varint,2,opt,name=billboard_id,json=billboardId,proto3" json:"billboard_id,omitempty"`
	// 운영자 주소
	OrganizerAddress string `protobuf:"bytes,3,opt,name=organizer_address,json=organizerAddress,proto3" json:"organizer_address,omitempty"`
	// 운영자 url
	OrganizerUrl string `protobuf:"bytes,4,opt,name=organizer_url,json=organizerUrl,proto3" json:"organizer_url,omitempty"`
	// 운영자 썸네일
	OrganizerImageUrl string `protobuf:"bytes,5,opt,name=organizer_image_url,json=organizerImageUrl,proto3" json:"organizer_image_url,omitempty"`
	// sto name
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// billbboard start
	Start int64 `protobuf:"varint,7,opt,name=start,proto3" json:"start,omitempty"`
	// billbboard end
	End int64 `protobuf:"varint,8,opt,name=end,proto3" json:"end,omitempty"`
	// STO 참여자 지분
	UserShare int32 `protobuf:"varint,9,opt,name=user_share,json=userShare,proto3" json:"user_share,omitempty"`
	// STO 운영자 지분 10% > 0.1
	// STO 생성시 share 코인 펀딩
	OrganizerShare int32 `protobuf:"varint,10,opt,name=organizer_share,json=organizerShare,proto3" json:"organizer_share,omitempty"`
	// 펀딩 목표 금액
	// STO 생성 시 빌보드 최저낙찰가와 start, end 계산
	Goal   types.Coin `protobuf:"bytes,11,opt,name=goal,proto3" json:"goal"`
	Funded types.Coin `protobuf:"bytes,12,opt,name=funded,proto3" json:"funded"`
	// sto 펀드 address
	StoAddress string `protobuf:"bytes,13,opt,name=sto_address,json=stoAddress,proto3" json:"sto_address,omitempty"`
}

func (m *Sto) Reset()         { *m = Sto{} }
func (m *Sto) String() string { return proto.CompactTextString(m) }
func (*Sto) ProtoMessage()    {}
func (*Sto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b70df997266d0dab, []int{0}
}
func (m *Sto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sto.Merge(m, src)
}
func (m *Sto) XXX_Size() int {
	return m.Size()
}
func (m *Sto) XXX_DiscardUnknown() {
	xxx_messageInfo_Sto.DiscardUnknown(m)
}

var xxx_messageInfo_Sto proto.InternalMessageInfo

func (m *Sto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sto) GetBillboardId() uint64 {
	if m != nil {
		return m.BillboardId
	}
	return 0
}

func (m *Sto) GetOrganizerAddress() string {
	if m != nil {
		return m.OrganizerAddress
	}
	return ""
}

func (m *Sto) GetOrganizerUrl() string {
	if m != nil {
		return m.OrganizerUrl
	}
	return ""
}

func (m *Sto) GetOrganizerImageUrl() string {
	if m != nil {
		return m.OrganizerImageUrl
	}
	return ""
}

func (m *Sto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sto) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Sto) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Sto) GetUserShare() int32 {
	if m != nil {
		return m.UserShare
	}
	return 0
}

func (m *Sto) GetOrganizerShare() int32 {
	if m != nil {
		return m.OrganizerShare
	}
	return 0
}

func (m *Sto) GetGoal() types.Coin {
	if m != nil {
		return m.Goal
	}
	return types.Coin{}
}

func (m *Sto) GetFunded() types.Coin {
	if m != nil {
		return m.Funded
	}
	return types.Coin{}
}

func (m *Sto) GetStoAddress() string {
	if m != nil {
		return m.StoAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Sto)(nil), "eeta.sto.Sto")
}

func init() { proto.RegisterFile("eeta/sto/sto.proto", fileDescriptor_b70df997266d0dab) }

var fileDescriptor_b70df997266d0dab = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0x26, 0x2d, 0xd7, 0x97, 0xde, 0x51, 0xcc, 0x0d, 0xe6, 0x24, 0x72, 0x01, 0x06,
	0x22, 0x90, 0x12, 0x1d, 0x37, 0x30, 0x73, 0x4c, 0xb7, 0xa6, 0x62, 0x61, 0xa9, 0x9c, 0xda, 0x04,
	0x4b, 0x69, 0x5e, 0x65, 0xbb, 0x08, 0xf8, 0x14, 0x7c, 0xac, 0x2e, 0x48, 0x1d, 0x99, 0x10, 0x6a,
	0xbf, 0x08, 0xb2, 0x53, 0x25, 0xeb, 0x0d, 0x91, 0x5e, 0x7e, 0xff, 0x5f, 0x14, 0xfb, 0xaf, 0x07,
	0x54, 0x4a, 0xcb, 0x0b, 0x63, 0xd1, 0x3d, 0xf9, 0x46, 0xa3, 0x45, 0x7a, 0xe6, 0x58, 0x6e, 0x2c,
	0x5e, 0x5d, 0xd6, 0x58, 0xa3, 0x87, 0x85, 0x9b, 0xba, 0xfc, 0x2a, 0x59, 0xa1, 0x59, 0xa3, 0x29,
	0x2a, 0x6e, 0x64, 0xf1, 0xed, 0xa6, 0x92, 0x96, 0xdf, 0x14, 0x2b, 0x54, 0x6d, 0x97, 0xbf, 0xfc,
	0x1d, 0x42, 0xb8, 0xb0, 0x48, 0x2f, 0x60, 0xa4, 0x04, 0x23, 0x29, 0xc9, 0xa2, 0x72, 0xa4, 0x04,
	0x7d, 0x01, 0xb3, 0x4a, 0x35, 0x4d, 0x85, 0x5c, 0x8b, 0xa5, 0x12, 0x6c, 0xe4, 0x93, 0xb8, 0x67,
	0xf7, 0x82, 0xbe, 0x85, 0x27, 0xa8, 0x6b, 0xde, 0xaa, 0x9f, 0x52, 0x2f, 0xb9, 0x10, 0x5a, 0x1a,
	0xc3, 0xc2, 0x94, 0x64, 0xd3, 0x72, 0xde, 0x07, 0x1f, 0x3a, 0x4e, 0x5f, 0xc1, 0xf9, 0x20, 0x6f,
	0x75, 0xc3, 0x22, 0x2f, 0xce, 0x7a, 0xf8, 0x49, 0x37, 0x34, 0x87, 0xa7, 0x83, 0xa4, 0xd6, 0xbc,
	0x96, 0x5e, 0x1d, 0x7b, 0x75, 0xf8, 0xd9, 0xbd, 0x4b, 0x9c, 0x4f, 0x21, 0x6a, 0xf9, 0x5a, 0xb2,
	0x89, 0x17, 0xfc, 0x4c, 0x2f, 0x61, 0x6c, 0x2c, 0xd7, 0x96, 0x3d, 0x4a, 0x49, 0x16, 0x96, 0xdd,
	0x0b, 0x9d, 0x43, 0x28, 0x5b, 0xc1, 0xce, 0x3c, 0x73, 0x23, 0x7d, 0x0e, 0xb0, 0x35, 0x52, 0x2f,
	0xcd, 0x57, 0xae, 0x25, 0x9b, 0xa6, 0x24, 0x1b, 0x97, 0x53, 0x47, 0x16, 0x0e, 0xd0, 0xd7, 0xf0,
	0x78, 0x38, 0x4a, 0xe7, 0x80, 0x77, 0x2e, 0x7a, 0xdc, 0x89, 0xb7, 0x10, 0xd5, 0xc8, 0x1b, 0x16,
	0xa7, 0x24, 0x8b, 0xdf, 0x3d, 0xcb, 0xbb, 0xbe, 0x73, 0xd7, 0x77, 0x7e, 0xea, 0x3b, 0xff, 0x88,
	0xaa, 0xbd, 0x8b, 0x76, 0x7f, 0xaf, 0x83, 0xd2, 0xcb, 0xf4, 0x3d, 0x4c, 0xbe, 0x6c, 0x5b, 0x21,
	0x05, 0x9b, 0x3d, 0xec, 0xb3, 0x93, 0x4e, 0xaf, 0x21, 0x36, 0x16, 0xfb, 0xb6, 0xcf, 0xfd, 0xc5,
	0xc1, 0x58, 0x3c, 0xf5, 0x7c, 0xf7, 0x66, 0x77, 0x48, 0xc8, 0xfe, 0x90, 0x90, 0x7f, 0x87, 0x84,
	0xfc, 0x3a, 0x26, 0xc1, 0xfe, 0x98, 0x04, 0x7f, 0x8e, 0x49, 0xf0, 0x79, 0xee, 0xb7, 0xe7, 0xbb,
	0xdf, 0x1f, 0xfb, 0x63, 0x23, 0x4d, 0x35, 0xf1, 0x2b, 0x70, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0xf1, 0xce, 0x6d, 0xf8, 0x58, 0x02, 0x00, 0x00,
}

func (m *Sto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StoAddress) > 0 {
		i -= len(m.StoAddress)
		copy(dAtA[i:], m.StoAddress)
		i = encodeVarintSto(dAtA, i, uint64(len(m.StoAddress)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.Funded.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSto(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Goal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSto(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.OrganizerShare != 0 {
		i = encodeVarintSto(dAtA, i, uint64(m.OrganizerShare))
		i--
		dAtA[i] = 0x50
	}
	if m.UserShare != 0 {
		i = encodeVarintSto(dAtA, i, uint64(m.UserShare))
		i--
		dAtA[i] = 0x48
	}
	if m.End != 0 {
		i = encodeVarintSto(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x40
	}
	if m.Start != 0 {
		i = encodeVarintSto(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSto(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrganizerImageUrl) > 0 {
		i -= len(m.OrganizerImageUrl)
		copy(dAtA[i:], m.OrganizerImageUrl)
		i = encodeVarintSto(dAtA, i, uint64(len(m.OrganizerImageUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrganizerUrl) > 0 {
		i -= len(m.OrganizerUrl)
		copy(dAtA[i:], m.OrganizerUrl)
		i = encodeVarintSto(dAtA, i, uint64(len(m.OrganizerUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrganizerAddress) > 0 {
		i -= len(m.OrganizerAddress)
		copy(dAtA[i:], m.OrganizerAddress)
		i = encodeVarintSto(dAtA, i, uint64(len(m.OrganizerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BillboardId != 0 {
		i = encodeVarintSto(dAtA, i, uint64(m.BillboardId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSto(dAtA []byte, offset int, v uint64) int {
	offset -= sovSto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSto(uint64(m.Id))
	}
	if m.BillboardId != 0 {
		n += 1 + sovSto(uint64(m.BillboardId))
	}
	l = len(m.OrganizerAddress)
	if l > 0 {
		n += 1 + l + sovSto(uint64(l))
	}
	l = len(m.OrganizerUrl)
	if l > 0 {
		n += 1 + l + sovSto(uint64(l))
	}
	l = len(m.OrganizerImageUrl)
	if l > 0 {
		n += 1 + l + sovSto(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSto(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovSto(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovSto(uint64(m.End))
	}
	if m.UserShare != 0 {
		n += 1 + sovSto(uint64(m.UserShare))
	}
	if m.OrganizerShare != 0 {
		n += 1 + sovSto(uint64(m.OrganizerShare))
	}
	l = m.Goal.Size()
	n += 1 + l + sovSto(uint64(l))
	l = m.Funded.Size()
	n += 1 + l + sovSto(uint64(l))
	l = len(m.StoAddress)
	if l > 0 {
		n += 1 + l + sovSto(uint64(l))
	}
	return n
}

func sovSto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSto(x uint64) (n int) {
	return sovSto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillboardId", wireType)
			}
			m.BillboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizerImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizerImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserShare", wireType)
			}
			m.UserShare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserShare |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizerShare", wireType)
			}
			m.OrganizerShare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizerShare |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Goal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Funded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSto = fmt.Errorf("proto: unexpected end of group")
)
