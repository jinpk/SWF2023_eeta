// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eeta/billboard/billboard.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Billboard struct {
	Id           uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerAddress string     `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Name         string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Url          string     `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	BoardType    string     `protobuf:"bytes,6,opt,name=board_type,json=boardType,proto3" json:"board_type,omitempty"`
	MinPrice     types.Coin `protobuf:"bytes,7,opt,name=min_price,json=minPrice,proto3" json:"min_price"`
}

func (m *Billboard) Reset()         { *m = Billboard{} }
func (m *Billboard) String() string { return proto.CompactTextString(m) }
func (*Billboard) ProtoMessage()    {}
func (*Billboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce86442ed919c461, []int{0}
}
func (m *Billboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Billboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Billboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Billboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Billboard.Merge(m, src)
}
func (m *Billboard) XXX_Size() int {
	return m.Size()
}
func (m *Billboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Billboard.DiscardUnknown(m)
}

var xxx_messageInfo_Billboard proto.InternalMessageInfo

func (m *Billboard) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Billboard) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Billboard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Billboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Billboard) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Billboard) GetBoardType() string {
	if m != nil {
		return m.BoardType
	}
	return ""
}

func (m *Billboard) GetMinPrice() types.Coin {
	if m != nil {
		return m.MinPrice
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Billboard)(nil), "eeta.billboard.Billboard")
}

func init() { proto.RegisterFile("eeta/billboard/billboard.proto", fileDescriptor_ce86442ed919c461) }

var fileDescriptor_ce86442ed919c461 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0x9b, 0xad, 0x4e, 0x9b, 0xe9, 0x90, 0x20, 0x12, 0x07, 0x66, 0x45, 0x2f, 0x3b, 0xa5,
	0x4e, 0x6f, 0xe2, 0xc5, 0xf9, 0x02, 0x32, 0x3c, 0x79, 0x19, 0x69, 0x13, 0x46, 0xa0, 0x4d, 0x4a,
	0x52, 0xff, 0xec, 0x2d, 0x7c, 0x04, 0x1f, 0x67, 0xc7, 0x1d, 0x3d, 0x89, 0xb4, 0x17, 0xc1, 0x97,
	0x90, 0xa4, 0xfe, 0xd9, 0xed, 0xcb, 0xe7, 0xd3, 0x86, 0xdf, 0xf7, 0x0b, 0x89, 0x10, 0x15, 0x4b,
	0x52, 0x99, 0xe7, 0xa9, 0x66, 0x86, 0xff, 0x27, 0x5a, 0x1a, 0x5d, 0x69, 0x34, 0x70, 0x9e, 0xfe,
	0xd1, 0xe1, 0xc1, 0x42, 0x2f, 0xb4, 0x57, 0x89, 0x4b, 0xed, 0x57, 0x43, 0x92, 0x69, 0x5b, 0x68,
	0x9b, 0xa4, 0xcc, 0x8a, 0xe4, 0x71, 0x92, 0x8a, 0x8a, 0x4d, 0x92, 0x4c, 0x4b, 0xd5, 0xfa, 0x93,
	0x2f, 0x00, 0xa3, 0xe9, 0xef, 0x1b, 0x68, 0x00, 0x3b, 0x92, 0x63, 0x10, 0x83, 0x71, 0x38, 0xeb,
	0x48, 0x8e, 0x4e, 0xe1, 0x9e, 0x7e, 0x52, 0xc2, 0xcc, 0x19, 0xe7, 0x46, 0x58, 0x8b, 0x3b, 0x31,
	0x18, 0x47, 0xb3, 0x5d, 0x0f, 0xaf, 0x5b, 0x86, 0x10, 0x0c, 0x15, 0x2b, 0x04, 0xee, 0x7a, 0xe7,
	0x33, 0x8a, 0x61, 0x9f, 0x0b, 0x9b, 0x19, 0x59, 0x56, 0x52, 0x2b, 0x1c, 0x7a, 0xb5, 0x89, 0xd0,
	0x3e, 0xec, 0x3e, 0x98, 0x1c, 0x6f, 0x79, 0xe3, 0x22, 0x3a, 0x86, 0xd0, 0x5f, 0x31, 0xaf, 0x96,
	0xa5, 0xc0, 0x3d, 0x2f, 0x22, 0x4f, 0xee, 0x96, 0xa5, 0x40, 0x57, 0x30, 0x2a, 0xa4, 0x9a, 0x97,
	0x46, 0x66, 0x02, 0x6f, 0xc7, 0x60, 0xdc, 0x3f, 0x3f, 0xa2, 0x6d, 0x3b, 0xea, 0xda, 0xd1, 0x9f,
	0x76, 0xf4, 0x46, 0x4b, 0x35, 0x0d, 0x57, 0xef, 0xa3, 0x60, 0xb6, 0x53, 0x48, 0x75, 0xeb, 0x7e,
	0xb8, 0x0c, 0x3f, 0x5f, 0x47, 0x60, 0x7a, 0xb6, 0xaa, 0x09, 0x58, 0xd7, 0x04, 0x7c, 0xd4, 0x04,
	0xbc, 0x34, 0x24, 0x58, 0x37, 0x24, 0x78, 0x6b, 0x48, 0x70, 0x7f, 0xe8, 0xd7, 0x7e, 0xde, 0xd8,
	0xdb, 0x5d, 0x61, 0xd3, 0x9e, 0x9f, 0xe9, 0xe2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x47, 0x15, 0x90,
	0xa1, 0x8e, 0x01, 0x00, 0x00,
}

func (this *Billboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Billboard)
	if !ok {
		that2, ok := that.(Billboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.OwnerAddress != that1.OwnerAddress {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.BoardType != that1.BoardType {
		return false
	}
	if !this.MinPrice.Equal(&that1.MinPrice) {
		return false
	}
	return true
}
func (m *Billboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Billboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Billboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBillboard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.BoardType) > 0 {
		i -= len(m.BoardType)
		copy(dAtA[i:], m.BoardType)
		i = encodeVarintBillboard(dAtA, i, uint64(len(m.BoardType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBillboard(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBillboard(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBillboard(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintBillboard(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBillboard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBillboard(dAtA []byte, offset int, v uint64) int {
	offset -= sovBillboard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Billboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBillboard(uint64(m.Id))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovBillboard(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBillboard(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBillboard(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBillboard(uint64(l))
	}
	l = len(m.BoardType)
	if l > 0 {
		n += 1 + l + sovBillboard(uint64(l))
	}
	l = m.MinPrice.Size()
	n += 1 + l + sovBillboard(uint64(l))
	return n
}

func sovBillboard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBillboard(x uint64) (n int) {
	return sovBillboard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Billboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Billboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Billboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillboard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBillboard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBillboard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBillboard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBillboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBillboard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBillboard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBillboard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBillboard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBillboard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBillboard = fmt.Errorf("proto: unexpected end of group")
)
